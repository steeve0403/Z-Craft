// ===========================
// _mixins.scss
// ===========================
/**
 * Mixins SCSS - This file contains mixins that provide reusable styles and effects
 * throughout the Z-Craft application.
 */

@use 'sass:map';
@use 'variables' as *;


/**
 * Flexbox Centering Mixin.
 * Centers an element using flexbox properties.
 * @mixin flex-center
 * @param {String} $direction - Direction of the flex (default: row).
 * @param {String} $justify - Justify content (default: center).
 * @param {String} $align - Align items (default: center).
 */
@mixin flex-center($direction: row, $justify: center, $align: center) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
}

/**
 * Mixin for a Glassmorphism Effect.
 * Provides a glass-like appearance to elements.
 * @mixin glass-effect
 * @param {Number} $blur-radius [$glass-blur-radius-light] - Blur radius for the glass effect.
 * @param {Color} $background-color [$glass-bg-color] - Background color for glass effect.
 */
@mixin glass-effect($blur-radius: $glass-blur-radius-light, $background-color: $glass-bg-color) {
  background: $background-color;
  backdrop-filter: blur($blur-radius);
  border-radius: $border-radius-soft;
  border: $border-width-thin solid $glass-border-color;
  box-shadow: $box-shadow-light;
}

/**
 * Card Mixin for Floating Cards.
 * Applies glassmorphism effects to create a floating card.
 * @mixin floating-card
 * @param {Number} $blur-radius [$glass-blur-radius-light] - Blur radius for glass effect.
 * @example scss
 * .glass-card {
 *   @include floating-card($glass-blur-radius-strong);
 * }
 */
@mixin floating-card($blur-radius: $glass-blur-radius-light) {
  @include glass-effect($blur-radius);
  padding: $spacing-large;
}

/**
 * Typography Styling Mixin.
 * Applies consistent typography styles to elements.
 * @mixin text-style
 * @param {String} $size - Font size to apply.
 * @param {Number} $weight - Font weight to apply (default: $font-weight-regular).
 */
@mixin text-style($size, $weight: $font-weight-regular) {
  font-size: $size;
  font-weight: $weight;
  color: $text-color-primary;
}

/**
 * Mixin for Textured Background.
 * Applies a textured background effect.
 * @mixin textured-background
 * @param {Color} $texture-color [$texture-light] - Texture color for rustic effect.
 * @example scss
 * .card {
 *   @include textured-background($texture-light);
 * }
 */
@mixin textured-background($texture-color: $texture-light) {
  background: $texture-color;
  border-radius: $border-radius-soft;
}

/**
 * Button Style Mixin.
 * Adds styles for buttons including padding, colors, and hover effects.
 * @mixin button-style
 * @param {Color} $bg-color - Background color.
 * @param {Color} $text-color - Text color.
 * @param {Number} $padding-x [$spacing-large] - Horizontal padding.
 * @param {Number} $padding-y [$spacing-medium] - Vertical padding.
 * @example scss
 * .button--primary {
 *   @include button-style($primary-color, $text-color-primary);
 * }
 */
@mixin button-style($bg-color, $text-color, $padding-x: $spacing-large, $padding-y: $spacing-medium) {
  background-color: $bg-color;
  color: $text-color;
  padding: $padding-y $padding-x;
  border-radius: $border-radius-soft;
  cursor: pointer;
  transition: background-color $animation-duration-fast ease;

  &:hover {
    background-color: darken($bg-color, 10%);
  }
}

/**
 * Responsive Media Query Mixin.
 * Generates media queries based on the given breakpoint.
 * @mixin respond-to
 * @param {String} $breakpoint - The breakpoint to respond to.
 * @example scss
 * .container {
 *   @include respond-to($breakpoint-tablet) {
 *     width: 100%;
 *   }
 * }
 */
@mixin respond-to($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    @media (min-width: map.get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "Breakpoint #{$breakpoint} not found in \$breakpoints map.";
  }
}

/**
 * Mixin for Smooth Transition.
 * Adds a smooth transition effect to elements for better UX.
 * @mixin smooth-transition
 * @param {Number} $duration [$transition-normal] - Duration of the transition.
 */
@mixin smooth-transition($duration: $transition-normal) {
  transition: all $duration ease-in-out;
}

/**
 * Overlay Mixin for Glassmorphism.
 * Creates a semi-transparent overlay with glass-like effects.
 * @mixin glass-overlay
 * @param {Number} $opacity [$glass-opacity-light] - Opacity for the overlay.
 * @example scss
 * .overlay {
 *   @include glass-overlay($glass-opacity-strong);
 * }
 */
@mixin glass-overlay($opacity: $glass-opacity-light) {
  background: rgba(255, 255, 255, $opacity);
  backdrop-filter: blur($glass-blur-radius-strong);
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: $z-index-modal;
}

/**
 * Gradient Background Mixin.
 * Generates a gradient background for elements.
 * @mixin gradient-background
 * @param {Color} $color1 - First color of the gradient.
 * @param {Color} $color2 - Second color of the gradient.
 * @param {Angle} $angle [135deg] - Angle of the gradient.
 */
@mixin gradient-background($color1, $color2, $angle: 135deg) {
  background: linear-gradient($angle, $color1, $color2);
  backdrop-filter: blur($glass-blur-radius-light); // Optional glassmorphic effect
}
