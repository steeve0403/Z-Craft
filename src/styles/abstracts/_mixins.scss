@use '@/styles/abstracts/variables' as *;
@use 'sass:color';

// Mixins for Reusability and Consistency

// Flex Centering Mixin
// Reusable flex mixin for centering elements in any direction
@mixin flex-center($direction: row, $justify: center, $align: center) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
}

// Container Mixin
// Provides consistent container width with responsive padding
@mixin container {
  width: 100%;
  margin-right: auto;
  margin-left: auto;
  padding-right: $spacing-4;
  padding-left: $spacing-4;

  @media (min-width: $breakpoint-lg) {
    max-width: $breakpoint-lg;
  }
}

// Button Base Mixin
// Styles for primary buttons with options for colors and padding
@mixin button-base($background-color: $color-primary, $text-color: $color-background, $padding-x: $spacing-4, $padding-y: $spacing-2) {
  background-color: $background-color;
  color: $text-color;
  padding: $padding-y $padding-x;
  border: none;
  border-radius: $border-radius-md;
  font-size: $font-size-base;
  font-weight: $font-weight-medium;
  cursor: pointer;
  transition: background-color $transition-fast, color $transition-fast, box-shadow $transition-base;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  text-align: center;

  &:hover {
    background-color: color.scale($background-color, $lightness: -10%);
  }

  &:disabled {
    background-color: color.scale($background-color, $lightness: -20%);
    cursor: not-allowed;
    opacity: 0.7;
  }
}

// Box Shadow Mode Mixin
// Adds different box shadows based on the provided theme mode
@mixin box-shadow-mode($mode: light) {
  @if $mode == light {
    box-shadow: $box-shadow-light;
  } @else if $mode == dark {
    box-shadow: $box-shadow-dark;
  }
}

// Input Base Mixin
// Base styles for input fields, including padding, colors, and focus effects
@mixin input-base($background-color: $color-background, $border-color: $color-border) {
  display: block;
  width: 100%;
  padding: $spacing-2 $spacing-3;
  font-size: $font-size-base;
  line-height: 1.5;
  color: $color-text;
  background-color: $background-color;
  border: 1px solid $border-color;
  border-radius: $border-radius-md;
  transition: border-color $transition-fast, box-shadow $transition-fast;

  &:focus {
    outline: none;
    border-color: $color-primary;
    box-shadow: 0 0 0 2px color.scale($color-primary, $alpha: 25%);
  }

  &:disabled {
    background-color: color.scale($background-color, $lightness: -10%);
    cursor: not-allowed;
    opacity: 0.6;
  }
}

// Gradient Background Mixin
// Generates a gradient background from two colors
@mixin gradient-background($color1, $color2) {
  background: linear-gradient(135deg, $color1, $color2);
}

// Responsive Media Query Mixin
// Generates media queries based on common breakpoints
// Responsive Media Query Mixin
// Generates media queries based on common breakpoints
@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "Breakpoint #{$breakpoint} not found in \$breakpoints map.";
  }
}

// Smooth Transition Mixin
// Adds a smooth transition effect to elements
@mixin smooth-transition {
  transition: all $transition-base ease;
}

// Hover Effect Mixin
// Adds hover effect to elements with customizable background and text color
@mixin hover-effect($hover-background: $color-primary-dark, $hover-text-color: $color-background) {
  &:hover {
    background-color: $hover-background;
    color: $hover-text-color;
    transition: background-color $transition-fast, color $transition-fast;
  }
}
