// ===========================
// _utilities.scss
// ===========================
/**
 * Utilities SCSS - Utility classes to be used across the Z-Craft CV Manager application.
 * This file contains utility classes and mixins for consistent styling and layout management throughout the application.
 */

@use '../abstracts/variables' as *;
@use '../abstracts/mixins' as *;

// ===========================
// Spacing Utilities
// ===========================

/**
 * Utility for Margin and Padding.
 * Creates utility classes for spacing.
 * @mixin spacing-utility
 * @param {String} $type - 'margin' or 'padding'.
 * @param {String} $size - Size of spacing to apply (e.g., $spacing-small).
 * @example scss - Applying margin spacing
 * .element {
 *   @include spacing-utility(margin, $spacing-small);
 * }
 */
@mixin spacing-utility($type, $size) {
  @if $type == 'margin' {
    margin: $size;
  } @else if $type == 'padding' {
    padding: $size;
  } @else {
    @warn "Unknown spacing type '#{$type}'. Please use 'margin' or 'padding'.";
  }
}

// ===========================
// Responsive Utilities
// ===========================

/**
 * Utility for Responsive Text Alignment.
 * Aligns text responsively based on screen size.
 * @mixin responsive-text-align
 * @param {String} $align - Alignment direction ('left', 'center', 'right').
 * @example scss - Aligning text responsively
 * .element {
 *   @include responsive-text-align(center);
 * }
 */
@mixin responsive-text-align($align) {
  text-align: $align;

  @include respond-to('tablet') {
    text-align: left;
  }
}

// ===========================
// Accessibility Utilities
// ===========================

/**
 * Utility for Accessible Focus State.
 * Adds accessible focus styles to elements to ensure good visibility.
 * @mixin accessible-focus
 * @example scss - Applying focus state
 * .button {
 *   @include accessible-focus;
 * }
 */
@mixin accessible-focus {
  outline: 2px solid $focus-outline-color;
  outline-offset: 2px;
}

// ===========================
// Glassmorphism Utilities
// ===========================

/**
 * Utility for Adding Glass Effect.
 * Applies a light glassmorphic effect to background elements.
 * @class .bg-glass-light
 * @example scss - Applying glass effect to a background
 * .card {
 *   @extend .bg-glass-light;
 * }
 */
.bg-glass-light {
  background: $glass-bg-color;
  backdrop-filter: blur($glass-blur-radius-light);
  border-radius: $border-radius-soft;
  opacity: $glass-opacity-light;
}

/**
 * Utility for Adding Strong Glass Effect.
 * Applies a stronger glassmorphic effect for more prominent elements.
 * @class .bg-glass-strong
 * @example scss - Applying strong glass effect to a modal
 * .modal {
 *   @extend .bg-glass-strong;
 * }
 */
.bg-glass-strong {
  background: $glass-bg-color;
  backdrop-filter: blur($glass-blur-radius-strong);
  border-radius: $border-radius-soft;
  opacity: $glass-opacity-strong;
}

// ===========================
// Visibility Management Utilities
// ===========================

/**
 * Utility for Visibility Management on Mobile Devices.
 * Hides an element on mobile screens.
 * @class .hide-on-mobile
 * @example scss - Hiding an element on mobile devices
 * .sidebar {
 *   @extend .hide-on-mobile;
 * }
 */
.hide-on-mobile {
  @include respond-to($breakpoint-mobile) {
    display: none !important;
  }
}

/**
 * Utility for Showing Only on Desktop.
 * Shows an element only on desktop screens.
 * @class .show-on-desktop
 * @example scss - Showing an element only on desktop
 * .banner {
 *   @extend .show-on-desktop;
 * }
 */
.show-on-desktop {
  display: none;

  @include respond-to('desktop') {
    display: block;
  }
}

// ===========================
// Positioning Utilities
// ===========================

/**
 * Utility for Absolute Centering.
 * Centers an element absolutely within its parent container.
 * @class .absolute-center
 * @example scss - Centering an element absolutely
 * .loader {
 *   @extend .absolute-center;
 * }
 */
.absolute-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

/**
 * Utility for Fixed Full-Screen Positioning.
 * Positions an element fixed and covers the entire screen.
 * @class .fixed-fullscreen
 * @example scss - Fullscreen overlay
 * .overlay {
 *   @extend .fixed-fullscreen;
 * }
 */
.fixed-fullscreen {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: $z-index-modal;
}

// ===========================
// Display Utilities
// ===========================

/**
 * Utility for Flex Centering.
 * Centers content horizontally and vertically using flexbox.
 * @class .flex-center
 * @example scss - Applying flex centering
 * .content {
 *   @extend .flex-center;
 * }
 */
.flex-center {
  @include flex-center();
}

/**
 * Utility for Inline Block Elements.
 * Displays an element as inline-block for wrapping.
 * @class .inline-block
 * @example scss - Displaying an element as inline-block
 * .tag {
 *   @extend .inline-block;
 * }
 */
.inline-block {
  display: inline-block;
}

/**
 * Utility for Floating Elements.
 * Applies floating properties to elements.
 * @class .float-right
 * @example scss - Floating an element to the right
 * .image {
 *   @extend .float-right;
 * }
 */
.float-right {
  float: right;
}

.float-left {
  float: left;
}
